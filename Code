%pip install pandas
import pandas as pd
weather = pd.read_csv("3588842.csv", index_col= "DATE")
null_pct=weather.apply(pd.isnull).sum()/weather.shape[0]
cleaner_columns = weather.columns[null_pct<.05]
weather = weather[cleaner_columns].copy()
weather.columns = weather.columns.str.lower()
weather = weather.ffill()
weather.apply(pd.isnull).sum()
weather.apply(lambda x: (x == 9999).sum())
weather.index = pd.to_datetime(weather.index)
weather.index.year.value_counts().sort_index()
weather["target"] = weather.shift(-1)["tmax"]
weather = weather.ffill()
from sklearn.linear_model import Ridge
rr= Ridge(alpha = .1)
predictors=weather.columns[~weather.columns.isin(["target","name","station","wdf2","wdf5","wsf2","wsf5","awnd"])]
def backtest(weather,model,predictors,start=3650,step=90):
    predictions=[]
    for i in range(start, weather.shape[0],step):
        train=weather.iloc[:i,:]
        test=weather.iloc[i:(i+step),:]
        model.fit(train[predictors],train["target"])
        preds=model.predict(test[predictors])
        preds=pd.Series(preds,index=test.index)
        combined=pd.concat([test["target"],preds],axis=1)
        combined.columns=["actual","prediction"]
        combined["diff"]=(combined["prediction"]-combined["actual"]).abs()
        predictions.append(combined)
    return pd.concat(predictions)
predictions= backtest(weather,rr,predictors)
from sklearn.metrics import mean_absolute_error
mean_absolute_error(predictions["actual"],predictions["prediction"])
def acc(old,new):
    return (new-old)/old
def rollacc(weather,horizen,col):
    label=f"rolling_{horizon}_{col}"
    weather[label]=weather[col].rolling(horizon).mean()
    weather[f"{label}_pct"]=acc(weather[label],weather[col])
    return weather
rolling_horizons=[3,14]
for horizon in rolling_horizons:
    for col in ["tmax", "tmin", "prcp"]:
        weather=rollacc(weather,horizon,col)
weather = weather.iloc[14:,:]
weather=weather.fillna(0)
def expand(df):
    return df.expanding(1).mean()
for col in ["tmax","tmin","prcp"]:
    weather[f"month_avg_{col}"]=weather[col].groupby(weather.index.month,group_keys=False).apply(expand)
    weather[f"day_avg_{col}"]=weather[col].groupby(weather.index.day_of_year,group_keys=False).apply(expand)
predictors=weather.columns[~weather.columns.isin(["target","name","station"])]
predictions= backtest(weather,rr,predictors)
mean_absolute_error(predictions["actual"],predictions["prediction"])
predictions.sort_values("diff",ascending=False)
weather.loc["2017-03-07":"2017-03-17"]
predictions["diff"].round().value_counts().sort_index()
predictions["diff"].round().value_counts().sort_index().plot()
                    
